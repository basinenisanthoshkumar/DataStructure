using System;
using System.Collections.Generic;

public class ListNode
{
    public int val;
    public ListNode next;
    public ListNode(int val = 0, ListNode next = null)
    {
        this.val = val;
        this.next = next;
    }
}

public class LinkedListProblems
{
    // 1. Reversal
    public static ListNode ReverseList(ListNode head)
    {
        ListNode prev = null;
        ListNode current = head;
        while (current != null)
        {
            ListNode nextTemp = current.next;
            current.next = prev;
            prev = current;
            current = nextTemp;
        }
        return prev;
    }

    // 2. Finding the Middle Node
    public static ListNode MiddleNode(ListNode head)
    {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }

    // 3. Detecting and Finding Loops
    public static bool HasCycle(ListNode head)
    {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast)
            {
                return true;
            }
        }
        return false;
    }

    public static ListNode DetectCycle(ListNode head)
    {
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next != null)
        {
            slow = slow.next;
            fast = fast.next.next;
            if (slow == fast)
            {
                ListNode ptr1 = head;
                ListNode ptr2 = slow;
                while (ptr1 != ptr2)
                {
                    ptr1 = ptr1.next;
                    ptr2 = ptr2.next;
                }
                return ptr1;
            }
        }
        return null;
    }

    // 4. Nth Node from the End
    public static ListNode NthNodeFromEnd(ListNode head, int n)
    {
        ListNode dummy = new ListNode(0, head);
        ListNode fast = dummy;
        ListNode slow = dummy;

        // Advance fast pointer n steps ahead
        for (int i = 0; i < n; i++)
        {
            if (fast == null) return null; // Handle cases where n is larger than the list
            fast = fast.next;
        }

        // Move both pointers until fast reaches the end
        while (fast.next != null)
        {
            slow = slow.next;
            fast = fast.next;
        }

        return slow.next;
    }

    // 5. Merging Sorted Lists
    public static ListNode MergeTwoLists(ListNode l1, ListNode l2)
    {
        if (l1 == null) return l2;
        if (l2 == null) return l1;

        if (l1.val < l2.val)
        {
            l1.next = MergeTwoLists(l1.next, l2);
            return l1;
        }
        else
        {
            l2.next = MergeTwoLists(l1, l2.next);
            return l2;
        }
    }

    // 6. Removing Duplicates from Sorted List
    public static ListNode DeleteDuplicatesSorted(ListNode head)
    {
        if (head == null) return head;

        ListNode current = head;
        while (current.next != null)
        {
            if (current.val == current.next.val)
            {
                current.next = current.next.next;
            }
            else
            {
                current = current.next;
            }
        }
        return head;
    }

    // 7. Partitioning a List
    public static ListNode PartitionList(ListNode head, int x)
    {
        ListNode lessHead = new ListNode(0);
        ListNode less = lessHead;
        ListNode greaterHead = new ListNode(0);
        ListNode greater = greaterHead;

        ListNode current = head;
        while (current != null)
        {
            if (current.val < x)
            {
                less.next = current;
                less = current;
            }
            else
            {
                greater.next = current;
                greater = current;
            }
            current = current.next;
        }

        greater.next = null; // Important: break the last greater node's next
        less.next = greaterHead.next;

        return lessHead.next;
    }

    // 8. Swapping Nodes (by value - assuming unique values for simplicity)
    public static ListNode SwapNodesByValue(ListNode head, int val1, int val2)
    {
        if (val1 == val2) return head;

        ListNode prev1 = null, curr1 = head;
        while (curr1 != null && curr1.val != val1)
        {
            prev1 = curr1;
            curr1 = curr1.next;
        }

        ListNode prev2 = null, curr2 = head;
        while (curr2 != null && curr2.val != val2)
        {
            prev2 = curr2;
            curr2 = curr2.next;
        }

        if (curr1 == null || curr2 == null) return head; // One or both values not found

        // If curr1 is not head
        if (prev1 != null)
            prev1.next = curr2;
        else
            head = curr2;

        // If curr2 is not head
        if (prev2 != null)
            prev2.next = curr1;
        else
            head = curr1;

        // Swap next pointers
        ListNode temp = curr1.next;
        curr1.next = curr2.next;
        curr2.next = temp;

        return head;
    }

    // 9. Adding Two Numbers Represented by Linked Lists
    public static ListNode AddTwoNumbers(ListNode l1, ListNode l2)
    {
        ListNode dummyHead = new ListNode(0);
        ListNode current = dummyHead;
        int carry = 0;

        while (l1 != null || l2 != null || carry != 0)
        {
            int sum = carry;
            if (l1 != null)
            {
                sum += l1.val;
                l1 = l1.next;
            }
            if (l2 != null)
            {
                sum += l2.val;
                l2 = l2.next;
            }

            carry = sum / 10;
            current.next = new ListNode(sum % 10);
            current = current.next;
        }

        return dummyHead.next;
    }

    // 10. Rotating a Linked List
    public static ListNode RotateRight(ListNode head, int k)
    {
        if (head == null || head.next == null || k == 0)
            return head;

        // Find the length of the list
        int length = 1;
        ListNode tail = head;
        while (tail.next != null)
        {
            tail = tail.next;
            length++;
        }

        // Effective rotations
        k = k % length;
        if (k == 0)
            return head;

        // Find the (length - k)-th node from the beginning
        ListNode current = head;
        for (int i = 1; i < length - k; i++)
        {
            current = current.next;
        }

        // Perform the rotation
        tail.next = head;
        head = current.next;
        current.next = null;

        return head;
    }

    // Helper function to print the linked list
    public static void PrintList(ListNode head)
    {
        ListNode current = head;
        while (current != null)
        {
            Console.Write(current.val + " -> ");
            current = current.next;
        }
        Console.WriteLine("NULL");
    }

    public static void Main(string[] args)
    {
        // Example Usage:

        Console.WriteLine("1. Reversal:");
        ListNode head1 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
        Console.Write("Original: "); PrintList(head1);
        ListNode reversedHead1 = ReverseList(head1);
        Console.Write("Reversed: "); PrintList(reversedHead1);
        Console.WriteLine();

        Console.WriteLine("2. Middle Node:");
        ListNode head2 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
        Console.WriteLine($"Middle Node value: {MiddleNode(head2).val}");
        Console.WriteLine();

        Console.WriteLine("3. Detecting and Finding Loops:");
        ListNode head3 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4))));
        head3.next.next.next.next = head3.next; // Create a cycle
        Console.WriteLine($"Has Cycle: {HasCycle(head3)}");
        ListNode cycleStart = DetectCycle(head3);
        Console.WriteLine($"Cycle starts at value: {(cycleStart != null ? cycleStart.val.ToString() : "No Cycle")}");
        Console.WriteLine();

        Console.WriteLine("4. Nth Node from the End (n=2):");
        ListNode head4 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
        ListNode nthNode = NthNodeFromEnd(head4, 2);
        Console.WriteLine($"2nd Node from end value: {(nthNode != null ? nthNode.val.ToString() : "null")}");
        Console.WriteLine();

        Console.WriteLine("5. Merging Sorted Lists:");
        ListNode l5_1 = new ListNode(1, new ListNode(2, new ListNode(4)));
        ListNode l5_2 = new ListNode(1, new ListNode(3, new ListNode(4)));
        Console.Write("List 1: "); PrintList(l5_1);
        Console.Write("List 2: "); PrintList(l5_2);
        Console.Write("Merged: "); PrintList(MergeTwoLists(l5_1, l5_2));
        Console.WriteLine();

        Console.WriteLine("6. Removing Duplicates from Sorted List:");
        ListNode head6 = new ListNode(1, new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(3)))));
        Console.Write("Original: "); PrintList(head6);
        Console.Write("Without Duplicates: "); PrintList(DeleteDuplicatesSorted(head6));
        Console.WriteLine();

        Console.WriteLine("7. Partitioning a List (pivot = 3):");
        ListNode head7 = new ListNode(1, new ListNode(4, new ListNode(3, new ListNode(2, new ListNode(5, new ListNode(2))))));
        Console.Write("Original: "); PrintList(head7);
        Console.Write("Partitioned: "); PrintList(PartitionList(head7, 3));
        Console.WriteLine();

        Console.WriteLine("8. Swapping Nodes by Value (swap 2 and 4):");
        ListNode head8 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
        Console.Write("Original: "); PrintList(head8);
        Console.Write("After Swap: "); PrintList(SwapNodesByValue(head8, 2, 4));
        Console.WriteLine();

        Console.WriteLine("9. Adding Two Numbers:");
        ListNode l9_1 = new ListNode(2, new ListNode(4, new ListNode(3)));
        ListNode l9_2 = new ListNode(5, new ListNode(6, new ListNode(4)));
        Console.Write("Number 1: "); PrintList(l9_1);
        Console.Write("Number 2: "); PrintList(l9_2);
        Console.Write("Sum: "); PrintList(AddTwoNumbers(l9_1, l9_2));
        Console.WriteLine();

        Console.WriteLine("10. Rotating a Linked List (k=2):");
        ListNode head10 = new ListNode(1, new ListNode(2, new ListNode(3, new ListNode(4, new ListNode(5)))));
        Console.Write("Original: "); PrintList(head10);
        Console.Write("Rotated (k=2): "); PrintList(RotateRight(head10, 2));
    }
}
